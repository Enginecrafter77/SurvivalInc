buildscript {
	repositories {
		maven { url = 'https://files.minecraftforge.net/maven' }
		maven { url = 'https://plugins.gradle.org/m2' }
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath 'gradle.plugin.fr.brouillard.oss.gradle:gradle-jgitver-plugin:0.10.0-rc03'
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
		classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.4.0'
	}
}

apply plugin: 'fr.brouillard.oss.gradle.jgitver'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'maven-publish'

group = "enginecrafter77.survivalinc"
archivesBaseName = "SurvivalInc"

// Need this here so eclipse task generates correctly.
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
	version = "1.12.2-14.23.5.2847"
	mappings = "stable_39"
	runDir = "run"
}

repositories {
	maven { url = 'https://dvs1.progwml6.com/files/maven/' }
	maven { url = 'http://maven.tehnut.info/' }
}

dependencies {
	runtimeOnly 'mezz.jei:jei_1.12.2:4.16.1.302'
	runtimeOnly 'mcp.mobius.waila:Hwyla:1.8.26-B41_1.12.2'
}

jgitver {
	autoIncrementPatch false
	useDirty true
}

jar {
	manifest {
		attributes([
			"Specification-Title": project.name,
			"Specification-Vendor": "Enginecrafter77",
			"Specification-Version": "1", // We are version 1 of ourselves
			"Implementation-Title": project.name,
			"Implementation-Version": project.version,
			"Implementation-Vendor": "Enginecrafter77",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

processResources {
	// this will ensure that this task is redone when the versions change.
	inputs.property "mcversion", project.minecraft.version
	inputs.property "version", project.version.toString()
	
	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'
		
		// replace version and mcversion
		expand 'version': project.version, 'mcversion': project.minecraft.version
	}
	
	// Move ATs to meta inf directory
	rename '(.+_at.cfg)', 'META-INF/$1'
}

// Maven publishing
publishing {
	repositories {
		maven {
			name 'EC77-Maven'
			url project.properties['ec77maven.url']
			credentials {
				username project.properties['ec77maven.username']
				password project.properties['ec77maven.password']
			}
		}
	}
	publications {
		privateMaven(MavenPublication) {
			groupId 'enginecrafter77.survivalinc'
			version project.version
			artifactId 'survivalinc_' + project.minecraft.version
			from components.java
			artifact sourceJar
			
			pom {
				name = project.archivesBaseName
				description = 'A Minecraft mod that aims to make your minecraft life a little bit more annoying'
				licenses {
					license {
						name = 'MIT'
						url = 'https://opensource.org/licenses/MIT'
					}
				}
				developers {
					developer {
						id = 'enginecrafter77'
						name = 'Michal Hutira'
						email = 'hutiramichal@gmail.com'
					}
				}
				scm {
					connection = 'scm:git:https://github.com/Enginecrafter77/SurvivalInc.git'
					url = 'https://github.com/Enginecrafter77/SurvivalInc'
				}
			}
		}
	}
}

// Curseforge publishing
curseforge {
	def cleanTag = Integer.parseInt(project.ext.commit_distance) == 0
	
	apiKey = project.properties["curseforge.apikey"] ?: 'null' // This little mf-er always throws error so we have to improvise here
	project {
		id = '375921'
		releaseType = System.getenv("GRADLE_RELEASE_TYPE") ?: (Boolean.parseBoolean(project.ext.dirty) ? 'alpha' : (cleanTag ? 'release' : 'beta'))
		changelogType = 'markdown'
		changelog = 'For changelog, see the [github release page](https://github.com/Enginecrafter77/SurvivalInc' + (cleanTag ? "/releases/tag/$project.ext.base_tag" : "/commit/$project.ext.git_sha1_8") + ').'
		
		mainArtifact(jar) {
			displayName = "${project.archivesBaseName}-${project.minecraft.version}-${project.version}.jar"
		}
	}
	options {
		debug = System.getenv("DRY_RUN") != null
	}
}

// Check if we are not trying to push dirty tree by accident.
task checkTreeState {
	doLast {
		if(Boolean.parseBoolean(project.ext.dirty) && System.getenv("GRADLE_FORCE_PUBLISH_DIRTY_TREE") == null)
			throw new GradleException("Refusing to publish dirty work tree. Commit your changes before!");
	}
}

// Add task dependencies
tasks.curseforge.dependsOn += checkTreeState
tasks.publish.dependsOn += checkTreeState
